@using PagedList
@using PagedList.Mvc

@model IPagedList<CIPLATFORM_SKILL_PM.Models.ViewModel.SkillModel>
<div class="table-responsive">
    <table class="table" style="border:1px solid rgb(197, 195, 195);">
        <thead style="background: #F8F9FC 0% 0% no-repeat padding-box;
                                box-shadow: 0px 2px 3px #0000000F;">
            <tr>
                <th>Title</th>
                <th>Status</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {

                <tr>

                    <td style="">@item.SkillName  &nbsp;@*@if (Int32.Parse((DateTime.Now-@item.createdAt).ToString())==1)*@
@*                        {
                          <h6><span class="btn btn-secondary">New</span></h6>
                        }*@
                    </td>
                    @if (item.Status == true)
                    {
                        <td style="color: green;">active</td>
                    }
                    else
                    {
                        <td style="color: red;">Deactivate</td>

                    }
                    <td>
                        <button style="border:none;background:none" data-bs-toggle="modal" onclick="editskill(@item.skillid,@Model.PageNumber)"
                            data-bs-target="#EditskillModal" type="button" class="editbuttonskill">
                            <svg style="color:orange;width: 20px;height: 20px;"
                             xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                             fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0                                                           0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                <path fill-rule="evenodd"
                                  d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0                                                           1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                            </svg>
                        </button>
                    </td>
                    <td>
                        <button class="btn  m-0 p-0" type="button" data-bs-toggle="modal" data-bs-target="#confirm-delete-skill-modal"
                            onclick="confirmationForDelete(@item.skillid,@Model.PageNumber)">
                            <img style="width:20px;height: 20px;"
                             src="~/images/bin.png">
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

</div>
<div id="pagination" class="my-3">
    <ul id="pagination-list" class="mb-3"></ul>
</div>

<script>


    function confirmationForDelete(deleteId)
    {
        $("#delete-skill-id").attr("onclick", "deleteSkill(" + deleteId + "," + @Model.PageNumber + ")");
    }


    var currentPage = @Model.PageNumber;
     var  pageNumber = sessionStorage.setItem("pagenumber", currentPage);
    function displayItems(itemsToDisplay)
    {
        // code to display the items for the current page
    }

    function displayPagination()
    {
        const totalPages = @Model.PageCount;
        const paginationList = document.getElementById("pagination-list");
        paginationList.innerHTML = "";

        // create the previous button
        const prevButton = document.createElement("li");
        const prevLink = document.createElement("a");
        prevLink.innerText = "< Prev";
        prevLink.href = "#";
        prevButton.appendChild(prevLink);
        paginationList.appendChild(prevButton);

        // create the page number buttons
        for (let i = 1; i <= totalPages; i++)
        {
            if (i == 1 || i == currentPage - 1 || i == currentPage || i == currentPage + 1 || i == totalPages)
            {
                const pageNumberButton = document.createElement("li");
                const pageNumberLink = document.createElement("a");
                pageNumberLink.innerText = i;
                pageNumberLink.href = "#";
                if (i == currentPage)
                {
                    pageNumberButton.classList.add("active");
                }
                pageNumberButton.appendChild(pageNumberLink);
                paginationList.appendChild(pageNumberButton);
            } else if (paginationList.lastChild.textContent !== "...")
            {
                const dots = document.createElement("li");
                dots.innerText = "...";
                paginationList.appendChild(dots);
            }
        }

        // create the next button
        const nextButton = document.createElement("li");
        const nextLink = document.createElement("a");
        nextLink.innerText = "Next >";
        nextLink.href = "#";
        nextButton.appendChild(nextLink);
        paginationList.appendChild(nextButton);
    }

    function setPage(pageNumber)
    {
        currentPage = pageNumber;
        getSkillData(currentPage);
        displayPagination();
    }

    displayItems();
    displayPagination();
    document.getElementById("pagination-list").addEventListener("click", function (e)
    {
        if (e.target.tagName === "A")
        {
            e.preventDefault();
            if (e.target.innerText === "< Prev" && currentPage > 1)
            {
                setPage(currentPage - 1);
            } else if (e.target.innerText === "Next >" && currentPage < @Model.PageCount)
            {
                setPage(currentPage + 1);
            } else
            {
                setPage(parseInt(e.target.innerText));
            }
        }
    });
</script>